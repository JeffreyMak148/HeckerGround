name: HeckerGround CICD
on:
  push:
    branches: [ main ]

jobs:
  #CI
  continuous-integration:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      # Step 1
      - name: Check out code
        uses: actions/checkout@v4

      # Step 2
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      # Step 3
      - name: Grant execute permission for gradlew
        working-directory: ./back-end
        run: chmod +x ./gradlew
      # Step 4
      - name: Unit tests
        working-directory: ./back-end
        run: ./gradlew test


  #CD
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [continuous-integration]
    if: github.ref == 'refs/heads/main'
    steps:
      # Step 1
      - name: Check out code
        uses: actions/checkout@v4

      # Step 2
      - name: Create GitHub deployment
        uses: chrnorm/deployment-action@v2
        id: github-deployment
        with:
          token: '${{ github.token }}'
          environment-url: https://heckerground.com
          environment: Production

      # Step 3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 4
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      # Step 5
      - name: Build and push images to Amazon ECR
        env:
          DOCKER_BUILDKIT: 1
        run: |
          docker-compose -f docker-compose-prod.yml build
          docker-compose -f docker-compose-prod.yml push

      # Step 6
      - name: Create CodeDeploy Deployment
        id: deploy
        run: |
          aws deploy create-deployment \
            --application-name heckerground-codedeploy \
            --deployment-group-name production-codedeploy \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --github-location repository=${{ github.repository }},commitId=${{ github.sha }}

      Step 7
      - name: Update github deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: https://heckerground.com
          state: 'success'
          deployment-id: ${{ steps.github-deployment.outputs.deployment_id }}

      - name: Update github deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: https://heckerground.com
          state: 'failure'
          deployment-id: ${{ steps.github-deployment.outputs.deployment_id }}
